



Network Working Group                                          R. Streur
Internet-Draft                                                       PSU
Intended status: Informational                          14 February 2025
Expires: 18 August 2025


                                RS_Party

Abstract

   This memo describes the communication protocol for a client/server
   application which allows users to plan events and invite other users
   to their events.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 18 August 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.







Streur                   Expires 18 August 2025                 [Page 1]

Internet-Draft                  RS_Party                   February 2025


Table of Contents

   1.  API: Anonymous Routes . . . . . . . . . . . . . . . . . . . .   2
     1.1.  POST /register  . . . . . . . . . . . . . . . . . . . . .   2
     1.2.  POST /login . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  API: Authenticated Routes . . . . . . . . . . . . . . . . . .   3
     2.1.  /event  . . . . . . . . . . . . . . . . . . . . . . . . .   3
       2.1.1.  /event POST . . . . . . . . . . . . . . . . . . . . .   3
       2.1.2.  /event GET  . . . . . . . . . . . . . . . . . . . . .   3
       2.1.3.  /event/{id} GET . . . . . . . . . . . . . . . . . . .   3
       2.1.4.  /event/{id} PUT . . . . . . . . . . . . . . . . . . .   3
       2.1.5.  /event/{id} DELETE  . . . . . . . . . . . . . . . . .   4
     2.2.  /invitation . . . . . . . . . . . . . . . . . . . . . . .   4
       2.2.1.  /invitation POST  . . . . . . . . . . . . . . . . . .   4
       2.2.2.  /invitation GET . . . . . . . . . . . . . . . . . . .   4
       2.2.3.  /invitation/{id} PATCH  . . . . . . . . . . . . . . .   4
       2.2.4.  /invitation/{id} DELETE . . . . . . . . . . . . . . .   4
   3.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .   4
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   4

1.  API: Anonymous Routes

   These routes are available for any Client, regardless of
   authentication status.

1.1.  POST /register

   The Client must supply the Server with a JSON body conforming to the
   following:

   { "email": "string", "name": "string", "password": "string" }

   The Server must hash the user's password using a secure hashing
   method.  It will then save the user's data to a new record in the
   postgresql database.  It will then create a new session in the
   database and return a UUID corresponding to the session key.

   The Client may store the session key and use it in the Authorization
   HTTP header to make authenticated requests until the session expires.

1.2.  POST /login

   The Client must supply the Server with a JSON body conforming to the
   following:

   { "email": "string", "password": "string" }





Streur                   Expires 18 August 2025                 [Page 2]

Internet-Draft                  RS_Party                   February 2025


   1.  The Server will first attempt to retrieve a user with a matching
       email address.

       *  If it fails to find one, it will return 400.

   2.  If it does find one, it will attempt to verify the password
       against the hash from the database.

       *  If the verification fails it will return 400.

   3.  If the verification succeeds, the Server will check for an
       existing session and invalidate it if one exists.

   4.  It will then create a new session and return the UUID session
       key.  The client may save the session key and include it in the
       header to make subsequent authenticated requests.

2.  API: Authenticated Routes

2.1.  /event

   Each event has a name, a start datetime, an end datetime, and a place
   (string).

2.1.1.  /event POST

   Given new event data (listed above) in the JSON body, create a new
   event in the database and a new Role record listing the authenticated
   user as its owner.

2.1.2.  /event GET

   For a logged-in user, retrieve a list of all the events they have
   access to.

2.1.3.  /event/{id} GET

   If the user has access to the event specified by {id"}, return that
   event's information.  Otherwise, or if the event does not exist,
   return 404.

2.1.4.  /event/{id} PUT

   Given updated data about an existing event and a user who has the
   Owner or Organizer role, update the event data in the database and
   return the updated event.





Streur                   Expires 18 August 2025                 [Page 3]

Internet-Draft                  RS_Party                   February 2025


2.1.5.  /event/{id} DELETE

   Given a user who is an Owner or Organizer of the event with {id},
   delete the event and return 200 if it succeeds.

2.2.  /invitation

   Invitations have a guest_id corresponding to the invitee, an
   inviter_id corresponding to the inviter, an event_id which identifies
   the event the user is being invited to, and a response which stores
   the guest's RSVP information.  They also include a role type, which
   is the role the user will be given for the event should they accept
   the invitation (guest, organizer, or owner).

2.2.1.  /invitation POST

   Given a user authorized to invite users to the event specified in the
   invitation information in the JSON body, create a new invitation in
   the system with the given information.

2.2.2.  /invitation GET

   Return a list of the invitations created for the user with
   information about each event.

2.2.3.  /invitation/{id} PATCH

   Given a user whose ID matches the invitation's guest_id, update the
   "response" field to the value included in the JSON body.

2.2.4.  /invitation/{id} DELETE

   Given a user who is either the owner of the corresponding event or
   the creator of the invitation, delete the invitation.  Otherwise
   return 401.

3.  Acknowledgements

   This document was created using kramdown-rfc, xml2rfc, and was
   started with this example (https://github.com/cabo/kramdown-
   rfc/blob/master/examples/draft-rfcxml-general-template-bare-00.xml-
   edited.md) document in the kramdown-rfc repo.

Author's Address

   Ryan Streur
   PSU




Streur                   Expires 18 August 2025                 [Page 4]
